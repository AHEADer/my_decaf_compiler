Design issues are put down here

# We keep a global symbol table which is declared static and could be accessed everywhere. Each Class, Interface, Function has its own symbol table which may be accessed via GetSymTable call. There is also a symbol table for every Stmtblock, that is, every local scope. Thus, there is no concern for shadowing and no need for removal when leaving the scope.

# Inheritance is handled with recursively adding decls of base class into the symbol table of derived class. The bass class keeps its own symbol table, too.

# We firstly deal with declaration errors and then turn to statement analysis.

# At the Program level, we do a breadth-first decls check because all the classes may be NamedType in the local scope. 

# Statements are checked in a in-order tree walk style

# "this" statement is handled as follows
   firstly we have to make sure it is in the class scope and also determine is real type
   we have to make sure the fieldaccess is through "this" 
   all the implicit "this" expression is handled with looking for declaration from local scope to outer scope

# If we encounter a second declaration that conflicts with the first, we report the error and discard the second (just do not add it to the symbol table).
