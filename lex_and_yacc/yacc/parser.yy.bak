/* $Id: parser.yy 48 2009-09-05 08:07:10Z tb $ -*- mode: c++ -*- */
/** \file parser.yy Contains the dcc Bison parser source */

%{ /*** C/C++ Declarations ***/

#include <stdio.h>
#include <string>
#include <vector>
//#include "scanner.h"
#include "expression.h"

#define MaxIdentLen 31

%}

/*** yacc/bison Declarations ***/

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

%name-prefix="dcc"

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "glr.cc"


/* set the parser's class identifier */
%define "parser_class_name" "Parser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Driver& driver }

/* verbose error messages */
%error-verbose

 /*** BEGIN dcc - Change the dcc grammar's tokens below ***/
%union {
    int       integerVal;
    double      doubleVal;
    std::string*    stringVal;
    bool boolVal;
    char identifier[32];
    //class CalcNode*   calcnode;
}

%token      END      0  "end of file"
%token      EOL   "end of line"

/*dcc tokens*/
%token   T_Void T_Bool T_Int T_Double T_String T_Class
%token   T_LessEqual T_GreaterEqual T_Equal T_NotEqual T_Dims T_Increment T_Decrement
%token   T_And T_Or T_Null T_Extends T_This T_Interface T_Implements
%token   T_While T_For T_If T_Else T_Return T_Break T_Switch T_Case T_Default
%token   T_New T_NewArray T_Print T_ReadInteger T_ReadLine

%token   <identifier> T_Identifier
%token   <stringVal>  T_StringConstant
%token   <integerVal> T_IntConstant
%token   <doubleVal>  T_DoubleConstant
%token   <boolVal>    T_BoolConstant


/* Non-terminal types
 * ------------------
 * In order for yacc to assign/access the correct field of $$, $1, we
 * must to declare which field is appropriate for the non-terminal.
 * As an example, this first type declaration establishes that the DeclList
 * non-terminal uses the field named "declList" in the yylval union. This
 * means that when we are setting $$ for a reduction for DeclList or reading
 * $n which corresponds to a DeclList nonterminal we are accessing the field
 * of the union named "declList" which is of type List<Decl*>.
 */
%type <program>       Program
%type <declList>      DeclList
%type <decl>          Decl
%type <vardecl>       VarDecl
%type <fndecl>        FnDecl
%type <classdecl>     ClassDecl
%type <interfacedecl> InterfaceDecl
%type <simpletype>    Type
%type <namedtype>     NamedType
%type <arraytype>     ArrayType
%type <vardecls>      Formals
%type <vardecls>      Variables
%type <implements>    Implements
%type <implements>    Impl
%type <namedtype>     Extend
%type <decl>          Field
%type <declList>      Fields
%type <decl>          Prototype
%type <declList>      Prototypes
%type <vardecls>      VarDecls
%type <stmt>          Stmt
%type <stmts>         Stmts
%type <stmtblock>     StmtBlock
%type <ifstmt>        IfStmt
%type <whilestmt>     WhileStmt
%type <forstmt>       ForStmt
%type <rtnstmt>       ReturnStmt
%type <brkstmt>       BreakStmt
%type <switchstmt>    SwitchStmt
%type <casestmts>     Cases
%type <casestmt>      Case
%type <defaultstmt>   Default
%type <pntstmt>       PrintStmt
%type <expr>          Expr
%type <expr>          OptExpr
%type <exprs>         Exprs
%type <exprs>         Actuals
%type <expr>          Constant
%type <intconst>      IntConstant 
%type <boolconst>     BoolConstant
%type <stringconst>   StringConstant
%type <doubleconst>   DoubleConstant
%type <nullconst>     NullConstant
%type <call>          Call
%type <arithmeticexpr> ArithmeticExpr
%type <relationalexpr> RelationalExpr
%type <equalityexpr>   EqualityExpr
%type <logicalexpr>    LogicalExpr
%type <assignexpr>     AssignExpr
%type <postfixexpr>    PostfixExpr
%type <lvalue>        LValue
%type <fieldaccess>   FieldAccess
%type <arrayaccess>   ArrayAccess

 /*** END dcc - Change the dcc grammar's tokens above ***/

%{

#include "driver.h"
#include "scanner.h"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

%}

%% /*** Grammar Rules ***/

 /*** BEGIN dcc - Change the dcc grammar rules below ***/

Program   :    DeclList              {
                                      @1;
                                      /* pp2: The @1 is needed to convince
                                       * yacc to set up yylloc. You can remove
                                       * it once you have other uses of @n*/
                                      $$ = NULL;
                                     }
          ;

DeclList  :    DeclList Decl         { $$ = NULL; }
          |    Decl                  { $$ = NULL; }
          ;

Decl      :    VarDecl              
          |    FnDecl                  
          |    ClassDecl
          |    InterfaceDecl
          ;
          
VarDecl   :    Type T_Identifier ';' { $$ = $$ = NULL; }     
          ;
        
Type      :    T_Int                 { $$ = NULL; }
          |    T_Double              { $$ = NULL; }
          |    T_Bool                { $$ = NULL; }
          |    T_String              { $$ = NULL; }
          |    NamedType
          |    ArrayType
          ;

NamedType :    T_Identifier          { $$ = NULL; }             
          ;

ArrayType :    Type T_Dims           { $$ = NULL; }
          ;

FnDecl    :    Type T_Identifier '(' Formals ')' StmtBlock
                                     { $$ = NULL; }
          |    T_Void T_Identifier '(' Formals ')' StmtBlock
                                     { $$ = NULL; }
          ;

Formals   :    Variables  
          |                          { $$ = NULL; }
          ;
          
Variables :    Variables ',' Type T_Identifier
                                     { $$ = NULL; }
          |     Type T_Identifier    { $$ = NULL; }
          ;
          
ClassDecl :    T_Class T_Identifier Extend Impl '{' Fields '}'              
                                     { $$ = NULL; }
          |    T_Class T_Identifier Extend Impl '{' '}'
                                     { $$ = NULL; }                           
          ;

Extend    :    T_Extends NamedType
                                     { $$ = NULL; }
          |                          { $$ = NULL; }          
          ;
          
Impl      :    T_Implements Implements 
                                     { $$ = NULL; }
          |                          { $$ = NULL; }
          ;
              
Implements :   Implements ',' NamedType 
                                     { $$ = NULL; }
           |   NamedType             { $$ = NULL; }
           ;                      

Fields     :   Fields Field          { $$ = NULL; }
           |   Field                 { $$ = NULL; }
           ;  

Field      :   VarDecl 
           |   FnDecl
           ;
           
InterfaceDecl : T_Interface T_Identifier '{' Prototypes '}'
                                     { $$ = NULL; }
              | T_Interface T_Identifier '{' '}'
                                     { $$ = NULL; }
              ;
              
Prototypes : Prototypes Prototype    { $$ = NULL; }
           | Prototype               { $$ = NULL; }
           ;
            
Prototype  : Type T_Identifier '(' Formals ')' ';'
                                     { $$ = NULL; }
           | T_Void T_Identifier '(' Formals ')' ';'
                                     { $$ = NULL; }
           ;                
           
StmtBlock  : '{' VarDecls Stmts '}'  { $$ = NULL; }
           | '{' VarDecls '}'        { $$ = NULL; }
           ;
           
VarDecls   : VarDecls VarDecl        { $$ = NULL;    }
           |                         { $$ = NULL;  }
           ;

Stmts      : Stmts Stmt              { $$ = NULL; }
           | Stmt                    { $$ = NULL;  }
           ;
           
Stmt       : OptExpr ';'  
           | IfStmt
           | WhileStmt
           | ForStmt
           | BreakStmt
           | ReturnStmt
           | SwitchStmt
           | PrintStmt
           | StmtBlock
           ;
          
           
IfStmt     : T_If '(' Expr ')' Stmt  %prec LOWER_THAN_ELSE
                                     { $$ = NULL; }
           | T_If '(' Expr ')' Stmt T_Else Stmt
                                     { $$ = NULL; }
           ;
                                     
           
WhileStmt  : T_While '(' Expr ')' Stmt
                                     { $$ = NULL; }
           ;
           
ForStmt    : T_For '(' OptExpr ';' Expr ';' OptExpr ')' Stmt
                                     { $$ = NULL; }
           ;
           
ReturnStmt : T_Return OptExpr ';'    { $$ = NULL; }
           ;
        
BreakStmt  : T_Break ';'             { $$ = NULL; }                            
           ;
           
SwitchStmt : T_Switch '(' Expr ')' '{' Cases Default '}'
                                     { $$ = NULL; }
           ;

Cases      : Cases Case              { $$ = NULL; }
           | Case                    { $$ = NULL; }
           ;

Case       : T_Case IntConstant ':' Stmts        
                                     { $$ = NULL; }
           | T_Case IntConstant ':'  { $$ = NULL; }
           ;
           
Default    : T_Default ':' Stmts     { $$ = NULL; }
           |                         { $$ = NULL; }
           ;

PrintStmt  : T_Print '(' Exprs ')' ';' 
                                     { $$ = NULL; }
           ;
           
Expr       :  AssignExpr          
           |  Constant
           |  LValue
           |  T_This                 { $$ = NULL; }
           |  Call
           |  '(' Expr ')'           { $$ = NULL; }
           |  ArithmeticExpr
           |  EqualityExpr
           |  RelationalExpr
           |  LogicalExpr
           |  PostfixExpr
         |  T_ReadInteger '(' ')'  { $$ = NULL; }
           |  T_ReadLine '(' ')'     { $$ = NULL; }
           |  T_New T_Identifier     { $$ = NULL; }
           |  T_NewArray '(' Expr ',' Type ')'
                                     { $$ = NULL; }
           ;

AssignExpr     : LValue '=' Expr     
                                     { $$ = NULL; } 
               ;
   
ArithmeticExpr : Expr '+' Expr       { $$ = NULL; }
               | Expr '-' Expr       { $$ = NULL; } 
               | Expr '*' Expr       { $$ = NULL; }
               | Expr '/' Expr       { $$ = NULL; }
               | Expr '%' Expr       { $$ = NULL; }
               | '-' Expr %prec UMINUS
                                     { $$ = NULL; }
               ;

PostfixExpr    : LValue T_Increment  { $$ = NULL; }
               | LValue T_Decrement  { $$ = NULL; }
               ;
               
EqualityExpr   : Expr T_Equal Expr   
                                     { $$ = NULL; }
               | Expr T_NotEqual Expr
                                     { $$ = NULL; }                        
               ;
                                            
RelationalExpr : Expr '<' Expr
                                     { $$ = NULL; }
               | Expr '>' Expr
                                     { $$ = NULL; } 
               | Expr T_LessEqual Expr 
                                     { $$ = NULL; }                     
               | Expr T_GreaterEqual Expr 
                                     { $$ = NULL; } 
               ;

LogicalExpr    : Expr T_And Expr 
                                     { $$ = NULL; }
               | Expr T_Or Expr 
                                     { $$ = NULL; }
               | '!' Expr            { $$ = NULL; }
               ;               


Exprs      : Exprs ',' Expr          { $$ = NULL; }
           | Expr                    { $$ = NULL; }
           ; 

OptExpr    : Expr
           |                         { $$ = NULL; }
           ;
 
            
LValue     : FieldAccess             
           | ArrayAccess 
           ; 

FieldAccess : T_Identifier           { $$ = NULL; }
            | Expr '.' T_Identifier
                                     { $$ = NULL; }
            ;

Call       : T_Identifier '(' Actuals ')' 
                                     { $$ = NULL; }  
           | Expr '.' T_Identifier '(' Actuals ')'
                                     { $$ = NULL; }
           ;

ArrayAccess : Expr '[' Expr ']'      { $$ = NULL; }
            ;
           
Actuals    : Exprs 
           |                         { $$ = NULL; }
           ;
           
Constant   : IntConstant            
           | DoubleConstant
           | BoolConstant
           | StringConstant
           | NullConstant
           ;

IntConstant    : T_IntConstant       { $$ = NULL; }
               ;
            
DoubleConstant : T_DoubleConstant    { $$ = NULL; }
               ;
               
BoolConstant   : T_BoolConstant      { $$ = NULL; }
               ;
               
StringConstant : T_StringConstant    { $$ = NULL; }
               ;
               
NullConstant   : T_Null              { $$ = NULL; }
               ;
 /*** END dcc - Change the dcc grammar rules above ***/

%% /*** Additional Code ***/

void dcc::Parser::error(const Parser::location_type& l,
          const std::string& m)
{
    driver.error(l, m);
}
